(load-option 'format)

(define (carmichael-check a n)
    (cond ((= n a) true)
          ((congruent-remainder? a n) (carmichael-check (+ a 1) n))
          (else false))
)

(define (fast-expt a n)
    (cond ((= n 0) 1)
          ((even? n) (square (fast-expt a (/ n 2))))
          (else (* a (fast-expt a (- n 1))))
    )
)

(define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp)
            (remainder (square (expmod base (/ exp 2) m)) m))
          (else
            (remainder (* base (expmod base (- exp 1) m)) m)
          )
    )
)

(define (congruent-remainder? a n)
    (= a (expmod a n n))
)

(define (is-carmichael? n)
    (let ((start-time (real-time-clock)))
        (if (carmichael-check 0 n)
            (format #t "~A is a carmichael~%" n)
            (format #t "~A is not a carmichael!~%" n))
        (format #t "time-cost: ~Ams ~%" (- (real-time-clock) start-time)))
)

(is-carmichael? 444)
(is-carmichael? 561)
(is-carmichael? 1105)
(is-carmichael? 1729)
(is-carmichael? 2465)
(is-carmichael? 2821)
(is-carmichael? 6601)