(load "../util.scm")
(load "2_61.scm")
(load "2_63.scm")

(define (list->tree elements)
    (car (partial-tree elements (length elements)))
)

(define (partial-tree eles n)
    (if ( = 0 n)
        (cons '() eles)
        (let ((left-size (quotient (- n 1) 2)))
            (let ((left-result (partial-tree eles left-size)))
                (let ((left-tree (car left-result))
                    (non-left-eles (cdr left-result))
                    (right-size (- n (+ left-size 1))))
                    (let ((right-result (partial-tree (cdr non-left-eles) right-size))
                        (this-entry (car non-left-eles)))
                        (let ((right-tree (car right-result))
                            (remaining-eles (cdr right-result)))
                            (cons (make-tree this-entry left-tree right-tree)
                                remaining-eles)))))))
)

;2-65
(define (union-tree s1 s2)
    (list->tree (union-set (tree->list-2 s1) (tree->list-2 s2)))
)

(define (intersection-tree s1 s2)
    (define (iter ele-list result)
        (if (null? ele-list)
            result
            (let ((item (car ele-list))
                  (rest (cdr ele-list)))
                (if (element-of-set? item s2)
                    (iter rest (append result (list item)))
                    (iter rest result)))))

    (let ((ele1 (tree->list-2 s1)))
        (list->tree (iter ele1 '()))
    )
)

;2_66
(define (lookup key set)
    (cond   ((null? set) #f)
            ((= key (entry set)) (entry set))
            ((< key (entry set)) (lookup key (left-branch set)))
            (else (lookup key (right-branch set))))
)

; test
(define list-a (list 1 3 5 7 9 11))
(define list-b (list 1 3 5 6 8 9))
(newline)
(define tree-a (list->tree list-a))
(define tree-b (list->tree list-b))

(display tree-a)
(newline)
(display tree-b)
(newline)
(display (intersection-tree tree-a tree-b))
(newline)
(display (union-tree tree-a tree-b))
(newline)
(display (adjion-set 4 tree-b))
(newline)
(display (lookup 6 tree-a))
(newline)
(display (lookup 7 tree-a))