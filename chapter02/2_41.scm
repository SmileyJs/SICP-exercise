(load "../util.scm")

(define (flatmap proc seq)
    (accumulate append nil (map proc seq))
)

(define (unique-triple n)
    (flatmap (lambda (i) 
                (flatmap (lambda (j) 
                            (map (lambda (k) (list k j i))
                                (enumerate-interval 1 (- j 1))))
                    (enumerate-interval 1 (- i 1))))
            (enumerate-interval 1 n))
)

(define (triple-sum seq)
    (+ (car seq)
        (cadr seq)
        (caddr seq))
)

(define (triple-sum-equal-to sum n)
    (filter (lambda (seq) (= (triple-sum seq) sum))
            (unique-triple n))
)

(display (unique-triple 5))
(newline)
(display (triple-sum-equal-to 10 7))
(newline)
(define list-a (list 1 2 3 4))
(display (car list-a))
(newline)
(display (cadr list-a))
(newline)
(display (caddr list-a))
(newline)
(display (cadddr list-a))
(newline)
(display (cddddr list-a))
(newline)