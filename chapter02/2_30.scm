(load "../util.scm")

(define (square-tree items)
    (cond ((null? items) nil)
          ((not (pair? items)) (square items))
          (else (cons   (square-tree (car items))
                        (square-tree (cdr items)))))
)

(define (square-tree-map items)
    (map (lambda (x)
            (if (pair? x)
                (square-tree-map x)
                (square x)))
         items)
)

;2_31
(define (tree-map func items)
    (map (lambda (x)
            (if (pair? x)
                (tree-map func x)
                (func x)))
         items)
)

(define (square-tree-map-2 items)
    (tree-map square items)
)

(define la (list 1 (list 2 (list 3 4) 5) (list 6 7)))

(display la)
(newline)
(display (square-tree la))
(newline)
(display (square-tree-map la))
(newline)
(display (square-tree nil))
(newline)
(display (square-tree-map nil))
(newline)
(display (square-tree-map-2 la))
(newline)
(display (square-tree-map-2 nil))